{"version":3,"sources":["components/map/map.context.jsx","components/map/map.jsx","components/layers/layers.jsx","components/layers/vector-layer/vector.layer.jsx","components/layers/tile-layer/tile.layer.jsx","components/source/vector.js","components/source/osm.js","components/controls/controls.jsx","components/controls/full-screen/full-screen.control.jsx","redux/selectors/layers.selectors.js","components/input/input.jsx","constants/actions.js","components/controls/layers-controller/layers-controller.jsx","redux/actions/layers.actions.js","components/app/app.jsx","reportWebVitals.js","core/layers/styles.js","redux/reducers/layers.reducer.js","redux/reducers/index.js","redux/store/store.js","index.jsx"],"names":["MapContext","createContext","map","Map","children","zoom","mapRef","useRef","useState","setMap","useEffect","options","view","View","center","fromLonLat","layers","controls","overlays","mapObject","OLMap","setTarget","current","undefined","getView","setZoom","Provider","value","ref","className","Layers","VectorLayer","source","useContext","vectorLayer","OLVectorLayer","declutter","addLayer","removeLayer","TileLayer","zIndex","tileLayer","OLTileLayer","setZIndex","vector","features","VectorSource","osm","olSource","Controls","attrs","FullScreenControl","fullScreenControl","FullScreen","activeClassName","inactiveClassName","tipLabel","push","remove","selectLayers","state","Input","id","label","labelClassName","htmlFor","type","TOGGLE_LAYER_VISIBILITY","TOGGLE_SUBLAYER_VISIBILITY","LayersController","dispatch","useDispatch","useSelector","handleCheckbox","key","payload","toggleLayerVisibility","handleSublayerCheckbox","sublayerKey","layerKey","toggleSubLayerVisibility","handleControl","control","checked","target","Object","entries","name","onChange","layerObject","visible","sublayer","App","isVisibleOSM","setIsVisibleOSM","values","layer","vectors","ind","Array","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","border","Style","stroke","Stroke","color","lineDash","lineCap","lineJoin","width","region","fill","Fill","river","city","image","Circle","radius","oopt","seas","noise","landscaping","fillColor","emissions","noises","PROJECTION","initialState","borders","styles","GeoJSON","readFeatures","geojsonBorders","featureProjection","get","regions","geojsonRegions","geojsonSeas","rivers","geojsonRivers","cities","geojsonCities","protectedArea","geojsonOOPT","izhevsk","prevVisible","landscape","emission","reducers","isLayerVisible","isSomeSublayerVisible","forEach","newState","sublayers","isVisible","every","combineReducers","composeEnhancers","window","compose","configureStore","middlewares","thunk","createStore","applyMiddleware","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38301e2c.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst MapContext = new createContext({ map: {} });\r\n\r\nexport default MapContext;\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport { View, Map as OLMap } from 'ol';\nimport MapContext from './map.context';\nimport './map.scss';\nimport { fromLonLat } from 'ol/proj';\n\nconst Map = ({\n  children,\n  zoom,\n}) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    const options = {\n      view: new View({ zoom, center: fromLonLat([53.206889, 56.853093]) }),\n      layers: [],\n      controls: [],\n      overlays: [],\n    };\n\n    const mapObject = new OLMap(options);\n    mapObject.setTarget(mapRef.current);\n\n    setMap(mapObject);\n\n    return () => {\n      mapObject.setTarget(undefined);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (map) {\n      map.getView().setZoom(zoom);\n    }\n  }, [zoom]);\n\n  return (\n    <MapContext.Provider value={{ map }}>\n      <div ref={mapRef} className=\"ol-map\">\n        {children}\n      </div>\n    </MapContext.Provider>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\r\n\r\nconst Layers = ({ children }) => (<div>{children}</div>);\r\n\r\nexport default Layers;\r\n","import { useContext, useEffect } from 'react';\nimport MapContext from \"../../map/map.context\";\nimport OLVectorLayer from \"ol/layer/Vector\";\n\nconst VectorLayer = ({ source, options = {} }) => {\n  const { map } = useContext(MapContext);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const vectorLayer = new OLVectorLayer({\n      declutter: true,\n      source,\n      ...options\n    });\n    map.addLayer(vectorLayer);\n\n    return () => {\n      if (map) {\n        map.removeLayer(vectorLayer);\n      }\n    };\n  }, [map, options]);\n\n  return null;\n};\nexport default VectorLayer;\n","import { useContext, useEffect } from 'react';\nimport MapContext from '../../map/map.context';\nimport OLTileLayer from 'ol/layer/Tile';\n\nconst TileLayer = ({ source, zIndex = 0 }) => {\n  const { map } = useContext(MapContext);\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const tileLayer = new OLTileLayer({\n      source,\n      zIndex,\n    });\n\n    map.addLayer(tileLayer);\n    tileLayer.setZIndex(zIndex);\n\n    return () => {\n      if (map) {\n        map.removeLayer(tileLayer);\n      }\n    };\n  }, [map]);\n\n  return null;\n};\n\nexport default TileLayer;\n","import { Vector as VectorSource } from 'ol/source';\r\n\r\nfunction vector({ features }) {\r\n  return new VectorSource({\r\n    features\r\n  });\r\n}\r\n\r\nexport default vector;\r\n","import * as olSource from \"ol/source\";\r\n\r\nfunction osm() {\r\n  return new olSource.OSM();\r\n}\r\n\r\nexport default osm;\r\n","import React from 'react';\r\n\r\nconst Controls = ({ children, ...attrs }) => (<div {...attrs}>{children}</div>);\r\n\r\nexport default Controls;\r\n","import { useContext, useEffect } from 'react';\r\nimport { FullScreen } from 'ol/control';\r\nimport MapContext from '../../map/map.context';\r\nimport './full-screen.scss';\r\n\r\nconst FullScreenControl = () => {\r\n  const { map } = useContext(MapContext);\r\n\r\n  useEffect(() => {\r\n    if (!map) {\r\n      return;\r\n    }\r\n    const fullScreenControl = new FullScreen({\r\n      className: 'control-full-screen',\r\n      activeClassName: 'control-full-screen__button',\r\n      inactiveClassName: 'control-full-screen__button',\r\n      tipLabel: 'Полноэкранный режим'\r\n    });\r\n    map.controls.push(fullScreenControl);\r\n\r\n    return () => map.controls.remove(fullScreenControl);\r\n  }, [map]);\r\n\r\n  return null;\r\n};\r\nexport default FullScreenControl;\r\n","export const selectLayers = state => state.layers;\n\n","import React from 'react';\r\nimport './input.scss';\r\n\r\nconst Input = ({\r\n  id,\r\n  label = '',\r\n  labelClassName = '',\r\n  ...attrs\r\n}) => {\r\n  return (\r\n    <label htmlFor={id} className={`input__container ${labelClassName}`}>\r\n      {label}\r\n      <input type=\"text\" className='input' {...attrs} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","export const TOGGLE_LAYER_VISIBILITY = 'LAYER/TOGGLE_LAYER_VISIBILITY';\nexport const TOGGLE_SUBLAYER_VISIBILITY = 'LAYER/TOGGLE_SUBLAYER_VISIBILITY';\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLayers } from '../../../redux/selectors/layers.selectors';\nimport Input from '../../input/input';\nimport { toggleLayerVisibility, toggleSubLayerVisibility } from '../../../redux/actions/layers.actions';\nimport './layers-controller.scss';\n\nconst LayersController = ({\n  controls = {}\n}) => {\n  const dispatch = useDispatch();\n  const layers = useSelector(selectLayers);\n\n  const handleCheckbox = (key) => () => dispatch(toggleLayerVisibility(key));\n  const handleSublayerCheckbox = (key, sublayerKey) => () => dispatch(toggleSubLayerVisibility(key, sublayerKey));\n\n  const handleControl = control => ({ target: { checked } }) => control(checked);\n\n  return (\n    <ul className='layers-controller'>\n      {Object.entries(controls).map(([key, { name, control, value }]) => (\n        <li key={key} className='layers-controller__element'>\n          <Input\n            type='checkbox'\n            checked={value}\n            label={name}\n            onChange={handleControl(control)}\n          />\n        </li>\n      ))}\n      {Object.entries(layers).map(([key, layerObject]) => (\n        <li key={key} className='layers-controller__element'>\n          <Input\n            type='checkbox'\n            checked={layerObject.options.visible}\n            label={layerObject.name}\n            onChange={handleCheckbox(key)}\n          />\n          {layerObject.layers.map(sublayer => sublayer.key && (\n            <ul className='layers-controller__sublist' key={sublayer.id}>\n              <li className='layers-controller__element'>\n                <Input\n                  type='checkbox'\n                  checked={sublayer.options.visible}\n                  label={sublayer.name}\n                  onChange={handleSublayerCheckbox(key, sublayer.key)}\n                />\n              </li>\n            </ul>\n          ))}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default LayersController;\n","import { TOGGLE_LAYER_VISIBILITY, TOGGLE_SUBLAYER_VISIBILITY } from '../../constants/actions';\n\nexport const toggleLayerVisibility = (key) => ({ type: TOGGLE_LAYER_VISIBILITY, payload: { key } });\nexport const toggleSubLayerVisibility = (layerKey, sublayerKey) => layerKey && sublayerKey &&\n  ({ type: TOGGLE_SUBLAYER_VISIBILITY, payload: { layerKey, sublayerKey } });\n","import React, { useRef, useState } from 'react';\nimport Map from '../map/map';\nimport { Layers, TileLayer, VectorLayer } from '../layers';\nimport { osm } from '../source';\nimport { Controls, FullScreenControl } from '../controls';\nimport './app.scss';\nimport { useSelector } from 'react-redux';\nimport { selectLayers } from '../../redux/selectors/layers.selectors';\nimport LayersController from '../controls/layers-controller/layers-controller';\n\nconst App = () => {\n  const zoom = useRef(9);\n  const layers = useSelector(selectLayers);\n  const [isVisibleOSM, setIsVisibleOSM] = useState(true);\n\n  return (\n    <div className='app'>\n      <Map zoom={zoom.current}>\n        <Layers>\n          {isVisibleOSM && (\n            <TileLayer\n              source={osm()}\n              zIndex={0}\n            />\n          )}\n          {Object.values(layers).map(layerObject => layerObject.layers.map(layer => layer.vectors.map((vector, ind) => (\n            <VectorLayer\n              key={`${layerObject.id}-${layer.id}-${ind}`}\n              source={vector instanceof Array ? vector[0] : vector}\n              options={ {\n                ...layerObject.options,\n                ...layer.options,\n                style: vector instanceof Array ? vector[1] : layerObject.options.style\n              } }\n            />\n          ))))}\n        </Layers>\n        <Controls>\n          <FullScreenControl />\n          <LayersController controls={{ osm: { name: 'Карта OSM', control: setIsVisibleOSM, value: isVisibleOSM } }} />\n        </Controls>\n      </Map>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Circle, Fill, Stroke, Style, } from 'ol/style';\n\nexport const border = new Style({\n  stroke: new Stroke({\n    color: 'rgba(238, 20, 16, 1.0)',\n    lineDash: null,\n    lineCap: 'square',\n    lineJoin: 'bevel',\n    width: 0,\n  }),\n});\n\nexport const region = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(114, 133, 132, 1.0)',\n      lineDash: null,\n      lineCap: 'butt',\n      lineJoin: 'miter',\n      width: 0,\n    }),\n    fill: new Fill({ color: 'rgba(222, 255, 255, 0.35)' }),\n  }),\n];\n\nexport const river = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(81, 10, 146, 1.0)',\n      lineDash: null,\n      lineCap: 'square',\n      lineJoin: 'bevel',\n      width: 0,\n    }),\n    fill: new Fill({ color: 'rgba(222, 255, 255, 1.0)' }),\n  }),\n];\n\nexport const city = [\n  new Style({\n    image: new Circle({\n      radius: 4.0,\n      stroke: new Stroke({\n        color: 'rgba(0, 0, 0, 1.0)',\n        lineDash: null,\n        lineCap: 'butt',\n        lineJoin: 'miter',\n        width: 0,\n      }),\n      fill: new Fill({ color: 'rgba(231, 50, 247, 1.0)' }),\n    }),\n  }),\n];\n\nexport const oopt = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 1.0)',\n      lineDash: null,\n      lineCap: 'butt',\n      lineJoin: 'miter',\n      width: 0,\n    }),\n    fill: new Fill({ color: 'rgba(222,124,124,0.3)' }),\n  }),\n];\n\nexport const seas = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 1.0)',\n      lineDash: null,\n      lineCap: 'butt',\n      lineJoin: 'miter',\n      width: 0,\n    }),\n    fill: new Fill({ color: 'rgba(6, 240, 240, 0.3)' }),\n  }),\n];\n\nexport const noise = (color) => [\n  new Style({\n    stroke: new Stroke({\n      color,\n      lineDash: null,\n      lineCap: 'square',\n      lineJoin: 'bevel',\n      width: 4\n    }),\n  })\n];\n\nexport const landscaping = (fillColor) => [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(35,35,35,0.5)',\n      lineDash: null,\n      lineCap: 'butt',\n      lineJoin: 'miter',\n      width: 0\n    }),\n    fill: new Fill({ color: fillColor }),\n  })\n];\n\nexport const emissions = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgba(35, 35, 35, 1.0)',\n      lineDash: null,\n      lineCap: 'butt',\n      lineJoin: 'miter',\n      width: 0\n    }),\n    fill: new Fill({ color: 'rgba(231, 113, 72, 0.6)' }),\n  })\n];\n","import GeoJSON from 'ol/format/GeoJSON';\nimport { get } from 'ol/proj';\nimport { vector } from '../../components/source';\nimport { TOGGLE_LAYER_VISIBILITY, TOGGLE_SUBLAYER_VISIBILITY } from '../../constants/actions';\nimport * as styles from '../../core/layers/styles';\n\nimport geojsonBorders from '../../assets/layers/borders.json';\nimport geojsonRegions from '../../assets/layers/regions.json';\nimport geojsonRivers from '../../assets/layers/rivers.json';\nimport geojsonCities from '../../assets/layers/cities.json';\nimport geojsonOOPT from '../../assets/layers/oopt.json';\nimport geojsonSeas from '../../assets/layers/seas.json';\n\nimport noise58 from '../../assets/layers/noise/noise58.json';\nimport noise61 from '../../assets/layers/noise/noise61.json';\nimport noise64 from '../../assets/layers/noise/noise64.json';\nimport noise70 from '../../assets/layers/noise/noise70.json';\nimport noise73 from '../../assets/layers/noise/noise73.json';\nimport noise76 from '../../assets/layers/noise/noise76.json';\nimport noise79 from '../../assets/layers/noise/noise79.json';\n\nimport landscaping0 from '../../assets/layers/landscaping/landscaping_0-19.json';\nimport landscaping20 from '../../assets/layers/landscaping/landscaping_20-39.json';\nimport landscaping40 from '../../assets/layers/landscaping/landscaping_40-59.json';\nimport landscaping60 from '../../assets/layers/landscaping/landscaping_60-100.json';\n\nimport emissionsLeninskiy from '../../assets/layers/emissions/emissions_leninskiy.json';\nimport emissionsOktyabrsky from '../../assets/layers/emissions/emissions_oktyabrsky.json';\nimport emissionsPervomaysky from '../../assets/layers/emissions/emissions_pervomaysky.json';\nimport emissionsUstinovsky from '../../assets/layers/emissions/emissions_ustinovskiy.json';\n\nconst noises = [\n  [noise58, 'rgba(251, 249, 224, 1)'],\n  [noise61, 'rgba(249, 236, 142, 1)'],\n  [noise64, 'rgba(255, 194, 101, 1)'],\n  [noise70, 'rgba(250, 147, 104, 1)'],\n  [noise73, 'rgba(198, 134, 106, 1)'],\n  [noise76, 'rgba(198, 134, 106, 1)'],\n  [noise79, 'rgba(198, 134, 106, 1)'],\n];\n\nconst landscaping = [\n  [landscaping0, 'rgba(237, 254, 210, 0.5)'],\n  [landscaping20, 'rgba(159, 207, 145, 0.5)'],\n  [landscaping40, 'rgba(83, 176, 64, 0.5)'],\n  [landscaping60, 'rgba(0, 129, 0, 0.5)'],\n];\n\nconst emissions = [\n  emissionsLeninskiy,\n  emissionsOktyabrsky,\n  emissionsPervomaysky,\n  emissionsUstinovsky,\n];\n\nconst PROJECTION = 'EPSG:3857';\n\nconst initialState = {\n  borders: {\n    id: 0,\n    name: 'Границы',\n    options: {\n      visible: true,\n      style: styles.border,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonBorders, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ],\n  },\n  regions: {\n    id: 1,\n    name: 'Регионы',\n    options: {\n      visible: true,\n      style: styles.region,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonRegions, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ]\n  },\n  seas: {\n    id: 2,\n    name: 'Моря',\n    options: {\n      visible: true,\n      style: styles.seas,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonSeas, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ]\n  },\n  rivers: {\n    id: 3,\n    name: 'Реки',\n    options: {\n      visible: true,\n      style: styles.river,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonRivers, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ]\n  },\n  cities: {\n    id: 4,\n    name: 'Города',\n    options: {\n      visible: true,\n      style: styles.city,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonCities, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ]\n  },\n  protectedArea: {\n    id: 5,\n    name: 'ООПТ',\n    options: {\n      visible: true,\n      style: styles.oopt,\n    },\n    layers: [\n      {\n        id: 0,\n        vectors: [\n          vector({\n            features: new GeoJSON().readFeatures(geojsonOOPT, { featureProjection: get(PROJECTION) }),\n          })\n        ]\n      }\n    ]\n  },\n  izhevsk: {\n    id: 6,\n    name: 'Ижевск',\n    options: {\n      visible: true,\n      style: styles.oopt,\n    },\n    layers: [\n      {\n        id: 0,\n        key: 'noise',\n        name: 'Уровень эквивалентного шума',\n        options: {\n          visible: true,\n          prevVisible: null,\n        },\n        vectors: noises.map(([noise, color]) => [\n          vector({\n            features: new GeoJSON().readFeatures(noise, { featureProjection: get(PROJECTION) })\n          }),\n          styles.noise(color)\n        ])\n      },\n      {\n        id: 1,\n        key: 'landscaping',\n        name: 'Озеленение',\n        options: {\n          visible: true,\n          prevVisible: null,\n        },\n        vectors: landscaping.map(([landscape, fillColor]) => [\n          vector({\n            features: new GeoJSON().readFeatures(landscape, { featureProjection: get(PROJECTION) }),\n          }),\n          styles.landscaping(fillColor)\n        ])\n      },\n      {\n        id: 2,\n        key: 'emissions',\n        name: 'Выбросы',\n        options: {\n          visible: true,\n          prevVisible: null,\n        },\n        vectors: emissions.map((emission) => [\n          vector({\n            features: new GeoJSON().readFeatures(emission, { featureProjection: get(PROJECTION) }),\n          }),\n          styles.emissions\n        ])\n      }\n\n    ]\n  }\n};\n\nconst layerReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case TOGGLE_LAYER_VISIBILITY:\n      const layer = { ...state[payload.key] };\n      const isLayerVisible = !layer.options.visible;\n      layer.options.visible = isLayerVisible;\n      if (layer.layers[0].key) {\n        if (isLayerVisible) {\n          let isSomeSublayerVisible = false;\n          layer.layers.forEach(sublayer => {\n            const visible = sublayer.options.prevVisible ?? true;\n            sublayer.options.visible = visible;\n            if (visible) {\n              isSomeSublayerVisible = true;\n            }\n          });\n          if (!isSomeSublayerVisible) {\n            layer.layers.forEach(sublayer => {\n              sublayer.options.visible = true;\n            });\n          }\n        } else {\n          layer.layers.forEach(sublayer => {\n            sublayer.options.prevVisible = sublayer.options.visible;\n            sublayer.options.visible = false;\n          });\n        }\n      }\n      return { ...state, [payload.key]: layer };\n    case TOGGLE_SUBLAYER_VISIBILITY:\n      const newState = { ...state };\n\n      const sublayers = state[payload.layerKey].layers.map(sublayer => {\n        if (sublayer.key === payload.sublayerKey) {\n          const isVisible = sublayer.options.visible;\n\n          sublayer.options.prevVisible = isVisible;\n          sublayer.options.visible = !isVisible;\n        }\n        return sublayer;\n      });\n      if (sublayers.every(sublayers => !sublayers.options.visible)) {\n        newState[payload.layerKey].options.visible = false;\n      }\n      return newState;\n    default: return state;\n  }\n};\n\nexport default layerReducer;\n","import { combineReducers } from 'redux';\nimport layers from './layers.reducer';\n\nconst reducers = {\n  layers\n};\n\nexport default combineReducers(reducers);\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\n\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\n\nconst configureStore = (initialState = {}) => {\n  const middlewares = [thunk];\n\n  return createStore(\n    reducers,\n    initialState,\n    composeEnhancers(\n      applyMiddleware(...middlewares),\n    ),\n  );\n}\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/app/app';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './redux/store/store';\nimport './index.scss';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('geo-map')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}